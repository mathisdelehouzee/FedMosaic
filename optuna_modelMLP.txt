batch_size = 16 
train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)


class OptimizedMLP(nn.Module):
    def __init__(self, input_dim=2):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(input_dim, 78),
            nn.ReLU(),
            nn.Dropout(0.4576),
            nn.Linear(78, 61),
            nn.ReLU(),
            nn.Dropout(0.4576),
            nn.Linear(61, 2)
        )

    def forward(self, x):
        return self.net(x)


model = OptimizedMLP().to(device)
optimizer = optim.Adam(model.parameters(), lr=1.28e-5)
criterion = nn.CrossEntropyLoss()